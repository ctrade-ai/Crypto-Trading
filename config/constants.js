/*

(mp1+mp2+mp3+mp4)/(ap1*bp1+ap2*bp2+ap3*bp1+ap1*bp1)

0-10 --> [AIUSDT|BUY, AI......]
11-20 --> [BTCUSDT,..]
21-30 --> [BTCUSDT,...]

price of eth
[]

*/


const INITIAL_QUANTITY = "500",
    // Eik hi coin pair 2 alag-alag position/function pe ho sakta hai (in case there are 3 coin pairs instead of 4)
    SYMBOLS = Object.freeze({ // Specify all coin pairs used
        1: { // Coin Pair 1
            symbol: "AIUSDT",
            qtyPrecision: 1,
            pricePrecision: 3,
            minNotional: 5,
            minQty: 0.1,
            marketPrice: null,
            bidPrice: null,
            askPrice: null
        },
        2: { // Coin Pair 2
            symbol: "AIBTC",
            qtyPrecision: 1,
            pricePrecision: 8,
            minNotional: 0.0001,
            minQty: 0.1,
            marketPrice: null,
            bidPrice: null,
            askPrice: null,
        },
        3: { // Coin Pair 3
            symbol: "MANABTC",
            qtyPrecision: 0,
            pricePrecision: 8,
            minNotional: 0.0001,
            minQty: 1,
            marketPrice: null,
            bidPrice: null,
            askPrice: null
        },
        4: { // Coin Pair 4
            symbol: "MANAUSDT",
            qtyPrecision: 0,
            pricePrecision: 4,
            minNotional: 5,
            minQty: 1,
            marketPrice: null,
            bidPrice: null,
            askPrice: null
        }
    }),
    CONDITION_SETS = Object.freeze({
        A: { // Condition = "A" (Default condition) --> [AIUSDT (1) - BUY, AIBTC (2) - SELL, MANABTC (3) - BUY, MANAUSDT (4) - SELL]
            1: { // Function 1
                symbol: 1, // Coin Pair 1 in SYMBOLS
                side: "BUY"
            },
            2: { // Function 2
                symbol: 2, // Coin Pair 2 in SYMBOLS
                side: "SELL"
            },
            3: { // Function 3
                symbol: 3, // Coin Pair 3 in SYMBOLS
                side: "BUY"
            },
            4: { // Function 4
                symbol: 4, // Coin Pair 4 in SYMBOLS
                side: "SELL"
            }
        },
        B: {  // Condition = "B" --> [AIUSDT (1) - SELL, MANAUSDT (4) - BUY, MANABTC (3) - SELL, AIBTC (2) - BUY]
            1: {
                symbol: 1,
                side: "SELL"
            },
            2: {
                symbol: 4,
                side: "BUY"
            },
            3: {
                symbol: 3,
                side: "SELL"
            },
            4: {
                symbol: 2,
                side: "BUY"
            }
        }
    }),
    TRANSACTION_ATTEMPTS = Object.freeze({ // User-specific
        TRANSACTION_1: 2,
        TRANSACTION_2: {
            MARKET: 1,
            ASK_BUY: 2
        }
    }),
    SIDE = Object.freeze({
        BUY: "BUY",
        SELL: "SELL"
    }),
    TYPE = Object.freeze({
        LIMIT: "LIMIT",
        MARKET: "MARKET"
    }),
    TIME_IN_FORCE = Object.freeze({
        GTC: "GTC",
        IOC: "IOC"
    }),
    SELECTED_PRICE = Object.freeze({
        SAME: "SAME",
        CHANGED: "CHANGED"
    }),
    TRANSACTION_STATUS = Object.freeze({
        COMPLETED: "COMPLETED",
        REVERSED: "REVERSED",
        UNDERVALUED: "UNDERVALUED",
        ERROR: "ERROR"
    }),
    UNIDENTIFIED_PROCESS = "UNIDENTIFIED_PROCESS",
    ERROR_CODE = Object.freeze({
        INSUFFICIENT_QUANTITY: "INSUFFICIENT_QUANTITY"
    }),
    ORDER_STATUS = Object.freeze({
        FILLED: "FILLED",
        EXPIRED: "EXPIRED",
        PARTIALLY_FILLED: "PARTIALLY_FILLED",
        NEW: "NEW",
        CANCELED: "CANCELED"
    }),
    TRANSACTION_DETAIL = Object.freeze({
        processId: null, // Frequency ID
        orderStatus: null, // COMPLETED || REVERSED || ERROR
        consumedTime: null,
        transactions: {
            1: { // Function 1
                orderId: null, // Unique ID generated by Binance for every transaction/order
                cummulativeQuoteQty: null, // Quantity of ticker 2
                executedQty: null, // Quantity of ticker 1
                executedPrice: null // Average price of the fill orders
            },
            2: { // Function 2
                orderId: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null
            },
            3: { // Function 3
                orderId: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null
            },
            4: { // // Function 4
                orderId: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null
            }
            // Reverse function 5 is created automatically based on function 1's values
        }
    });

module.exports = {
    INITIAL_QUANTITY,
    SYMBOLS,
    CONDITION_SETS,
    TRANSACTION_ATTEMPTS,
    SIDE,
    TYPE,
    TIME_IN_FORCE,
    SELECTED_PRICE,
    TRANSACTION_STATUS,
    UNIDENTIFIED_PROCESS,
    ERROR_CODE,
    ORDER_STATUS,
    TRANSACTION_DETAIL
};
